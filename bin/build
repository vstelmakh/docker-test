#!/bin/bash

# Set working directory to project root
SCRIPT=$(readlink -f "$0")
DIR=$(dirname "$SCRIPT")
cd "${DIR}/.."

# Default configuration
REPOSITORY=ghcr.io/vstelmakh/docker-test
VERSION_BASE=latest
VERSION=latest
# UID defined as readonly with proper value in some systems
if [[ -z $UID ]]; then
    UID=1000
fi
IS_PUSH=false

# Help
function print_help() {
cat << HEREDOC
Build - is tool to build project docker images

Usage:
  build -v 1.0.0 -b latest -r example.com/path

Arguments:
  No arguments allowed

Options:
  -v, --version       Set image version (default: $VERSION)
  -b, --version-base  Set base version to use cache from (default: $VERSION_BASE)
  -r, --repository    Set container repository url (default: $REPOSITORY)
  -u, --uid           Set host UID for proper permissions of synced files (default: $UID)
      --push          Push images to repository (push existent images, NO build will happen)
  -h, --help          Display this help message
HEREDOC
}

# Parsing options
while [[ "$#" -gt 0 ]]; do
    case $1 in
        -r|--repository) REPOSITORY=$2; shift ;;
        -b|--version-base) VERSION_BASE=$2; shift ;;
        -v|--version) VERSION=$2; shift ;;
        -u|--uid) UID=$2; shift ;;
        --push) IS_PUSH=true ;;
        -h|--help) print_help; exit 0 ;;
        *) echo "Unexpected option: $1"; exit 1 ;;
    esac
    shift
done

# Images
IMAGE_PHP_BASE=$REPOSITORY/php_base
IMAGE_PHP_PROD=$REPOSITORY/php_prod
IMAGE_PHP_DEV=$REPOSITORY/php_dev
IMAGE_NGINX=$REPOSITORY/nginx

# Push
if [[ $IS_PUSH == 'true' ]]; then
    echo "Pushing PHP (base)"
    docker push $IMAGE_PHP_BASE:$VERSION
    echo
    echo "Pushing PHP (prod)"
    docker push $IMAGE_PHP_PROD:$VERSION
    echo
    echo "Pushing PHP (dev)"
    docker push $IMAGE_PHP_DEV:$VERSION
    echo
    echo "Pushing Nginx"
    docker push $IMAGE_NGINX:$VERSION
    exit 0
fi

# Build
cat << HEREDOC
Building docker images

Version "$VERSION" based on "$VERSION_BASE"
Repository: $REPOSITORY

  PHP base | $IMAGE_PHP_BASE:$VERSION
  PHP prod | $IMAGE_PHP_PROD:$VERSION
  PHP dev  | $IMAGE_PHP_DEV:$VERSION
  Nginx    | $IMAGE_NGINX:$VERSION

Host user id: $UID

HEREDOC

# During docker build, ensure that all the earlier stages mentioned as cache from
# See https://pythonspeed.com/articles/faster-multi-stage-builds/ for details

# Build php base image
echo "# PHP (base)"
docker pull $IMAGE_PHP_BASE:$VERSION_BASE || echo "Base image \"$IMAGE_PHP_BASE:$VERSION_BASE\" not found in registry"
docker build . \
    --file docker/php/Dockerfile \
    --target php_base \
    --cache-from $IMAGE_PHP_BASE:$VERSION_BASE \
    --tag $IMAGE_PHP_BASE:$VERSION

# Install composer dependencies and sync to host
echo "# Composer"
docker run --rm -e UID=$UID -v $PWD/app:/app $IMAGE_PHP_BASE:$VERSION bash -c "\
    usermod -u \$UID -s /bin/bash www-data \
    && su www-data -c 'composer install --prefer-dist --no-progress --no-interaction --no-scripts --no-autoloader'"

# Build php production image
echo "# PHP (prod)"
docker pull $IMAGE_PHP_PROD:$VERSION_BASE || echo "Base image \"$IMAGE_PHP_PROD:$VERSION_BASE\" not found in registry"
docker build . \
    --file docker/php/Dockerfile \
    --target php_prod \
    --cache-from $IMAGE_PHP_BASE:$VERSION \
    --cache-from $IMAGE_PHP_PROD:$VERSION_BASE \
    --tag $IMAGE_PHP_PROD:$VERSION

# Build php dev image
echo "# PHP (dev)"
docker pull $IMAGE_PHP_DEV:$VERSION_BASE || echo "Base image \"$IMAGE_PHP_DEV:$VERSION_BASE\" not found in registry"
docker build . \
    --file docker/php/Dockerfile \
    --target php_dev \
    --cache-from $IMAGE_PHP_BASE:$VERSION \
    --cache-from $IMAGE_PHP_PROD:$VERSION \
    --cache-from $IMAGE_PHP_DEV:$VERSION_BASE \
    --tag $IMAGE_PHP_DEV:$VERSION

# Build nginx image
echo "# Nginx"
docker pull $IMAGE_NGINX:$VERSION_BASE || echo "Base image \"$IMAGE_NGINX:$VERSION_BASE\" not found in registry"
docker build . \
    --file docker/nginx/Dockerfile \
    --target nginx \
    --cache-from $IMAGE_NGINX:$VERSION_BASE \
    --tag $IMAGE_NGINX:$VERSION
